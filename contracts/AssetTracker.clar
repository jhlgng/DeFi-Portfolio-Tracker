(define-constant ERR_NOT_AUTHORIZED u100)
(define-constant ERR_INVALID_ASSET u101)
(define-constant ERR_ORACLE_FAILURE u102)
(define-constant ERR_INVALID_AMOUNT u103)
(define-constant ERR_ASSET_NOT_FOUND u104)
(define-constant ERR_PRICE_NOT_SET u105)
(define-constant ERR_INVALID_TOKEN_LENGTH u106)
(define-constant ERR_LIST_FULL u107)
(define-constant ERR_INVALID_PRICE u108)
(define-constant ERR_NO_ASSETS u109)
(define-constant ERR_MATH_OVERFLOW u110)
(define-constant ERR_INVALID_DECIMALS u111)
(define-constant ERR_INVALID_TIMESTAMP u112)
(define-constant ERR_UPDATE_NOT_ALLOWED u113)
(define-constant ERR_INVALID_OWNER u114)
(define-constant ERR_MAX_ASSETS_EXCEEDED u115)
(define-constant ERR_INVALID_CURRENCY u116)
(define-constant ERR_INVALID_CATEGORY u117)
(define-constant ERR_INVALID_YIELD u118)
(define-constant ERR_INVALID_RISK_SCORE u119)
(define-constant ERR_ORACLE_NOT_SET u120)

(define-data-var oracle-contract (optional principal) none)
(define-data-var max-assets-per-user uint u50)
(define-data-var price-update-fee uint u100)
(define-data-var last-update-timestamp uint u0)
(define-data-var admin principal tx-sender)

(define-map UserAssets principal { assets: (list 50 { token: (string-ascii 32), amount: uint, decimals: uint, category: (string-ascii 20) }) })
(define-map AssetPrices (string-ascii 32) { price: uint, timestamp: uint, source: principal })
(define-map AssetYields (string-ascii 32) uint)
(define-map UserRiskScores principal uint)
(define-map AssetCategories (string-ascii 32) (string-ascii 20))

(define-read-only (get-user-assets (user principal))
  (map-get? UserAssets user)
)

(define-read-only (get-asset-price (token (string-ascii 32)))
  (map-get? AssetPrices token)
)

(define-read-only (get-asset-yield (token (string-ascii 32)))
  (map-get? AssetYields token)
)

(define-read-only (get-user-risk-score (user principal))
  (map-get? UserRiskScores user)
)

(define-read-only (get-portfolio-value (user principal))
  (let ((assets-opt (map-get? UserAssets user)))
    (match assets-opt
      data (fold calculate-value (get assets data) u0)
      u0
    )
  )
)

(define-private (calculate-value (asset { token: (string-ascii 32), amount: uint, decimals: uint, category: (string-ascii 20) }) (acc uint))
  (let ((price-opt (map-get? AssetPrices (get token asset))))
    (match price-opt
      p (+ acc (* (get amount asset) (get price p)))
      acc
    )
  )
)

(define-private (validate-token (token (string-ascii 32)))
  (if (and (> (len token) u0) (<= (len token) u32))
    (ok true)
    (err ERR_INVALID_TOKEN_LENGTH)
  )
)

(define-private (validate-amount (amount uint))
  (if (> amount u0)
    (ok true)
    (err ERR_INVALID_AMOUNT)
  )
)

(define-private (validate-decimals (decimals uint))
  (if (<= decimals u18)
    (ok true)
    (err ERR_INVALID_DECIMALS)
  )
)

(define-private (validate-category (category (string-ascii 20)))
  (if (or (is-eq category "crypto") (is-eq category "stablecoin") (is-eq category "nft"))
    (ok true)
    (err ERR_INVALID_CATEGORY)
  )
)

(define-private (validate-price (price uint))
  (if (> price u0)
    (ok true)
    (err ERR_INVALID_PRICE)
  )
)

(define-private (validate-yield (yield-rate uint))
  (if (<= yield-rate u10000)
    (ok true)
    (err ERR_INVALID_YIELD)
  )
)

(define-private (validate-risk-score (score uint))
  (if (<= score u100)
    (ok true)
    (err ERR_INVALID_RISK_SCORE)
  )
)

(define-private (validate-timestamp (ts uint))
  (if (> ts (var-get last-update-timestamp))
    (ok true)
    (err ERR_INVALID_TIMESTAMP)
  )
)

(define-private (validate-owner (owner principal))
  (if (is-eq owner tx-sender)
    (ok true)
    (err ERR_INVALID_OWNER)
  )
)

(define-private (validate-oracle)
  (match (var-get oracle-contract)
    o (if (is-eq tx-sender o) (ok true) (err ERR_NOT_AUTHORIZED))
    (err ERR_ORACLE_NOT_SET)
  )
)

(define-public (set-oracle-contract (contract principal))
  (begin
    (asserts! (is-eq tx-sender (var-get admin)) (err ERR_NOT_AUTHORIZED))
    (var-set oracle-contract (some contract))
    (ok true)
  )
)

(define-public (set-max-assets (new-max uint))
  (begin
    (asserts! (is-eq tx-sender (var-get admin)) (err ERR_NOT_AUTHORIZED))
    (asserts! (> new-max u0) (err ERR_INVALID_AMOUNT))
    (var-set max-assets-per-user new-max)
    (ok true)
  )
)

(define-public (set-price-update-fee (new-fee uint))
  (begin
    (asserts! (is-eq tx-sender (var-get admin)) (err ERR_NOT_AUTHORIZED))
    (var-set price-update-fee new-fee)
    (ok true)
  )
)

(define-public (add-asset (token (string-ascii 32)) (amount uint) (decimals uint) (category (string-ascii 20)))
  (let ((user tx-sender))
    (try! (validate-token token))
    (try! (validate-amount amount))
    (try! (validate-decimals decimals))
    (try! (validate-category category))
    (match (map-get? UserAssets user)
      existing
        (let ((current-assets (get assets existing)))
          (asserts! (< (len current-assets) (var-get max-assets-per-user)) (err ERR_LIST_FULL))
          (map-set UserAssets user { assets: (unwrap-panic (as-max-len? (append current-assets { token: token, amount: amount, decimals: decimals, category: category }) u50)) })
        )
      (map-set UserAssets user { assets: (list { token: token, amount: amount, decimals: decimals, category: category }) })
    )
    (print { event: "asset-added", user: user, token: token })
    (ok true)
  )
)

(define-public (update-asset-balance (token (string-ascii 32)) (new-amount uint))
  (let ((user tx-sender))
    (try! (validate-token token))
    (try! (validate-amount new-amount))
    (match (map-get? UserAssets user)
      existing
        (let ((assets (get assets existing)))
          (asserts! (> (len assets) u0) (err ERR_NO_ASSETS))
          (let ((updated-assets (map update-if-match assets { token: token, new-amount: new-amount })))
            (map-set UserAssets user { assets: updated-assets })
          )
        )
      (err ERR_NOT_AUTHORIZED)
    )
    (print { event: "balance-updated", user: user, token: token })
    (ok true)
  )
)

(define-private (update-if-match (asset { token: (string-ascii 32), amount: uint, decimals: uint, category: (string-ascii 20) }) (params { token: (string-ascii 32), new-amount: uint }))
  (if (is-eq (get token asset) (get token params))
    { token: (get token asset), amount: (get new-amount params), decimals: (get decimals asset), category: (get category asset) }
    asset
  )
)

(define-public (remove-asset (token (string-ascii 32)))
  (let ((user tx-sender))
    (try! (validate-token token))
    (match (map-get? UserAssets user)
      existing
        (let ((assets (get assets existing)))
          (let ((filtered (filter not-match-token assets token)))
            (map-set UserAssets user { assets: filtered })
          )
        )
      (err ERR_NOT_AUTHORIZED)
    )
    (print { event: "asset-removed", user: user, token: token })
    (ok true)
  )
)

(define-private (not-match-token (asset { token: (string-ascii 32), amount: uint, decimals: uint, category: (string-ascii 20) }) (token (string-ascii 32)))
  (not (is-eq (get token asset) token))
)

(define-public (update-asset-price (token (string-ascii 32)) (price uint) (ts uint))
  (begin
    (try! (validate-oracle))
    (try! (validate-token token))
    (try! (validate-price price))
    (try! (validate-timestamp ts))
    (try! (stx-transfer? (var-get price-update-fee) tx-sender (var-get admin)))
    (map-set AssetPrices token { price: price, timestamp: ts, source: tx-sender })
    (var-set last-update-timestamp ts)
    (print { event: "price-updated", token: token })
    (ok true)
  )
)

(define-public (set-asset-yield (token (string-ascii 32)) (yield-rate uint))
  (begin
    (try! (validate-oracle))
    (try! (validate-token token))
    (try! (validate-yield yield-rate))
    (map-set AssetYields token yield-rate)
    (print { event: "yield-set", token: token })
    (ok true)
  )
)

(define-public (set-user-risk-score (user principal) (score uint))
  (begin
    (try! (validate-oracle))
    (try! (validate-risk-score score))
    (map-set UserRiskScores user score)
    (print { event: "risk-score-set", user: user })
    (ok true)
  )
)

(define-public (set-asset-category (token (string-ascii 32)) (category (string-ascii 20)))
  (begin
    (asserts! (is-eq tx-sender (var-get admin)) (err ERR_NOT_AUTHORIZED))
    (try! (validate-token token))
    (try! (validate-category category))
    (map-set AssetCategories token category)
    (ok true)
  )
)